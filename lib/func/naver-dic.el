(require 'cl)
(defun ndic (word)
  "simple naver dictionary browser"
  (interactive
   (list (let ((wd (current-word)))
           (read-string (format "dict naver (default '%s'): " wd)))))
  (let ((url
         (format "http://endic.naver.com/search.naver?where=dic&query=%s"
                 (qs-url-encode word))))
    (with-output-to-temp-buffer "*ndic*"
      (set-buffer "*ndic*")
      (setq buffer-read-only nil)
      (erase-buffer)
      (call-process "wget" nil (current-buffer) nil "-q" "-O-" url)
      (setf (point) (point-min))
      (when (looking-at "<META HTTP-EQUIV=")
        (progn (re-search-forward "url=")
               (delete-region (point-min) (point))
               (re-search-forward "\"")
               (setq url (format "http://endic.naver.com%s"
                                 (buffer-substring (point-min) (1- (point)))))
               (erase-buffer)
               (call-process "wget" nil (current-buffer) nil "-q" "-O-" url)
               (setf (point) (point-min))))
      (when (search-forward "<!-- end :" nil t)
        (beginning-of-line 2)
        (delete-region (point-min) (point)))
      (when (search-forward "<!-- start :" nil t)
        (beginning-of-line 0)
        (delete-region (point) (point-max)))
      (setf (point) (point-min))
      (while (re-search-forward "<[^>]+>" nil t) (replace-match ""))
      (setf (point) (point-min))
      (while (re-search-forward "&[^;]+;" nil t) (replace-match ""))
      (setf (point) (point-min))
      (when (re-search-forward (format "^%s" word) nil t)
        (beginning-of-line 0)
        (delete-region (point-min) (point)))
      (setf (point) (point-min))
      (insert (format "definition of %s: %s\n" word url))
      (pop-to-buffer "*ndic*"))))

(defun qs-url-encode (str &optional coding)
  "urlencode the string"
  (loop for c across (encode-coding-string str (or coding 'utf-8))
        concat (cond ((eq c ?\n) "%0D%0A")
                     ((string-match "[-a-zA-Z0-9_:/.]" (char-to-string c))
                      (char-to-string c))
                     ((char-equal c ?\x20) "+")
                     (t (format "%%%02x" c)))))
